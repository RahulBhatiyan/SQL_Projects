Select * from orders

1- write a query to print top 5 cities with highest spends and
their percentage contribution of total credit card spends?


with cte as (
Select  sum(amount) as total_amount from credit_card_transactions)
Select top 5 city, sum(amount) as total_amount,total_amount , cast((sum(amount)/total_amount)*100 as decimal(5,2)) as percentage_contribution
from credit_card_transactions, cte 
group by city,total_amount
order by percentage_contribution desc


 

2- write a query to print highest spend month and amount spent in that month for each card type

with cte as (
Select card_type, sum(amount) as total_amount,datename(month,transaction_date) as mth, datepart(year,transaction_date) as yr
from credit_card_transactions 
group by card_type,datepart(year,transaction_date),datename(month,transaction_date)) 
select * from(
select *, row_number() over(partition by card_type order by total_amount desc) as row_number_ranking
from cte) a
where row_number_ranking = 1  



3- write a query to print the transaction details(all columns from the table) for each card type when
it reaches a cumulative of 1000000 total spends(We should have 4 rows in the o/p one for each card type



Select * from (
Select *, rank() over(partition by card_type order by cumulative_sum asc) as rn
from (
Select *, sum(amount) over(partition by city order by transaction_date , transaction_id) as  cumulative_sum
from credit_card_transactions
) a
where cumulative_sum >= 1000000
) b
where rn = 1 

--4- write a query to find city which had lowest percentage spend for gold card type


Select city, 
sum(case when card_type = 'Gold' then amount else 0 end) as Gold_spenditure ,
sum(amount) as expense,
(sum(case when card_type = 'Gold' then amount else 0 end) / sum(amount)) * 100 as percentage_contribution
from credit_card_transactions
group by city
having sum(case when card_type = 'Gold' then amount else 0 end) > 0
order by percentage_contribution

Select * from credit_card_transactions
--5- write a query to print 3 columns: city, highest_expense_type , lowest_expense_type (example format : Delhi , bills, Fuel)

with cte as (
Select city, exp_type, sum(amount) as Total_spenditure
from credit_card_transactions
group by city, exp_type
),
cte2 as (
Select *,
Rank() over(partition by city order by Total_spenditure desc) as RN1,
Rank() over(partition by city order by Total_spenditure asc) as RN2
from cte
)
Select city,
max(case when RN1 = 1 then exp_type end) as Highest_exp_type,
max(case when RN2 = 1 then exp_type end) as Lowest_exp_type
from cte2
--where RN1=1 and RN2 = 1
group by city

--6 write a query to find percentage contribution of spends by females for each expense type
Select * from credit_card_transactions

Select exp_type, 
sum(case when gender = 'F' then amount end) as F_spenditure,
sum(amount) Total_amount,
(sum(case when gender = 'F' then amount end)/sum(amount)) * 100 as Percentage_contribution
from credit_card_transactions
group by exp_type
order by Percentage_contribution desc

7- which card and expense type combination saw highest month over month growth in Jan-2014
Select * from credit_card_transactions

with cte as (
Select card_type, 
exp_type, 
datepart(month,transaction_date) as mth, 
datepart(year,transaction_date) as yr,
sum(amount) as total_spend
from credit_card_transactions
group by card_type, exp_type,datepart(month,transaction_date),datepart(year,transaction_date)
)
Select top 1 *, total_spend - previous_spend  as mom
from(
Select *,
lag(total_spend,1) over(partition by card_type,exp_type order by yr,mth) as previous_spend 
from cte
) a
where previous_spend is not null and yr=2014 and mth=1
order by mom desc

8- during weekends which city has highest total spend to total no of transcations ratio 

Select city, sum(amount)*1.0 as total_spend, count(*) as transactions_count ,sum(amount) / count(*)  as transaction_ratio
from credit_card_transactions
where datepart(weekday,transaction_date) in (1,7)
group by city
order by transaction_ratio desc

9- which city took least number of days to reach its 500th transaction after the first transaction in that city
Select * from credit_card_transactions

with cte as (
select *
, row_number() over(partition by city order by transaction_date,transaction_id) as rn
from credit_card_transactions)
select city, min(transaction_date) as first_transaction,max(transaction_date) as last_transaction
, datediff(day,min(transaction_date),max(transaction_date)) as days_to_500
from cte
where rn in (1,500)
group by city
having count(*)=2
order by days_to_500 asc



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































